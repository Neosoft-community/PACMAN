// vite.config.ts
import "file:///C:/Users/c.darivon/OneDrive%20-%20NEOSOFT/Documents/GitHub/PACMAN/node_modules/dotenv/config.js";
import { defineConfig } from "file:///C:/Users/c.darivon/OneDrive%20-%20NEOSOFT/Documents/GitHub/PACMAN/node_modules/vite/dist/node/index.js";
import { getMaps, getMapsOptimizers, getMapsScripts, LogLevel } from "file:///C:/Users/c.darivon/OneDrive%20-%20NEOSOFT/Documents/GitHub/PACMAN/node_modules/wa-map-optimizer-vite/dist/index.js";
var maps = getMaps();
var optimizerOptions = {
  logs: process.env.LOG_LEVEL && process.env.LOG_LEVEL in LogLevel ? LogLevel[process.env.LOG_LEVEL] : LogLevel.NORMAL
};
if (process.env.TILESET_OPTIMIZATION && process.env.TILESET_OPTIMIZATION === "true") {
  const qualityMin = process.env.TILESET_OPTIMIZATION_QUALITY_MIN ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MIN) : 0.9;
  const qualityMax = process.env.TILESET_OPTIMIZATION_QUALITY_MAX ? parseInt(process.env.TILESET_OPTIMIZATION_QUALITY_MAX) : 1;
  optimizerOptions.output = {
    tileset: {
      compress: {
        quality: [qualityMin, qualityMax]
      }
    }
  };
}
var vite_config_default = defineConfig({
  base: "./",
  build: {
    rollupOptions: {
      input: {
        index: "./index.html",
        ...getMapsScripts(maps)
      }
    }
  },
  plugins: [...getMapsOptimizers(maps, optimizerOptions)],
  server: {
    host: "localhost",
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS",
      "Access-Control-Allow-Headers": "X-Requested-With, content-type, Authorization",
      "Cache-Control": "no-cache, no-store, must-revalidate"
    },
    open: "/"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxjLmRhcml2b25cXFxcT25lRHJpdmUgLSBORU9TT0ZUXFxcXERvY3VtZW50c1xcXFxHaXRIdWJcXFxcUEFDTUFOXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxjLmRhcml2b25cXFxcT25lRHJpdmUgLSBORU9TT0ZUXFxcXERvY3VtZW50c1xcXFxHaXRIdWJcXFxcUEFDTUFOXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9jLmRhcml2b24vT25lRHJpdmUlMjAtJTIwTkVPU09GVC9Eb2N1bWVudHMvR2l0SHViL1BBQ01BTi92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCAnZG90ZW52L2NvbmZpZyc7XHJcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XHJcbmltcG9ydCB7IGdldE1hcHMsIGdldE1hcHNPcHRpbWl6ZXJzLCBnZXRNYXBzU2NyaXB0cywgTG9nTGV2ZWwsIE9wdGltaXplT3B0aW9ucyB9IGZyb20gXCJ3YS1tYXAtb3B0aW1pemVyLXZpdGVcIjtcclxuXHJcbmNvbnN0IG1hcHMgPSBnZXRNYXBzKCk7XHJcblxyXG5sZXQgb3B0aW1pemVyT3B0aW9uczogT3B0aW1pemVPcHRpb25zID0ge1xyXG4gICAgbG9nczogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMICYmIHByb2Nlc3MuZW52LkxPR19MRVZFTCBpbiBMb2dMZXZlbCA/IExvZ0xldmVsW3Byb2Nlc3MuZW52LkxPR19MRVZFTF0gOiBMb2dMZXZlbC5OT1JNQUwsXHJcbn07XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT04gJiYgcHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT04gPT09IFwidHJ1ZVwiKSB7XHJcbiAgICBjb25zdCBxdWFsaXR5TWluID0gcHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT05fUVVBTElUWV9NSU4gPyBwYXJzZUludChwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTl9RVUFMSVRZX01JTikgOiAwLjk7XHJcbiAgICBjb25zdCBxdWFsaXR5TWF4ID0gcHJvY2Vzcy5lbnYuVElMRVNFVF9PUFRJTUlaQVRJT05fUVVBTElUWV9NQVggPyBwYXJzZUludChwcm9jZXNzLmVudi5USUxFU0VUX09QVElNSVpBVElPTl9RVUFMSVRZX01BWCkgOiAxO1xyXG5cclxuICAgIG9wdGltaXplck9wdGlvbnMub3V0cHV0ID0ge1xyXG4gICAgICAgIHRpbGVzZXQ6IHtcclxuICAgICAgICAgICAgY29tcHJlc3M6IHtcclxuICAgICAgICAgICAgICAgIHF1YWxpdHk6IFtxdWFsaXR5TWluLCBxdWFsaXR5TWF4XSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcclxuICAgIGJhc2U6IFwiLi9cIixcclxuICAgIGJ1aWxkOiB7XHJcbiAgICAgICAgcm9sbHVwT3B0aW9uczoge1xyXG4gICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IFwiLi9pbmRleC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAuLi5nZXRNYXBzU2NyaXB0cyhtYXBzKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHBsdWdpbnM6IFsuLi5nZXRNYXBzT3B0aW1pemVycyhtYXBzLCBvcHRpbWl6ZXJPcHRpb25zKV0sXHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgICBob3N0OiBcImxvY2FsaG9zdFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsXHJcbiAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiOiBcIkdFVCwgUE9TVCwgUFVULCBERUxFVEUsIFBBVENILCBPUFRJT05TXCIsXHJcbiAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiOiBcIlgtUmVxdWVzdGVkLVdpdGgsIGNvbnRlbnQtdHlwZSwgQXV0aG9yaXphdGlvblwiLFxyXG4gICAgICAgICAgICBcIkNhY2hlLUNvbnRyb2xcIjogXCJuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZVwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3BlbjogXCIvXCIsXHJcbiAgICB9LFxyXG59KTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUEyWCxPQUFPO0FBQ2xZLFNBQVMsb0JBQW9CO0FBQzdCLFNBQVMsU0FBUyxtQkFBbUIsZ0JBQWdCLGdCQUFpQztBQUV0RixJQUFNLE9BQU8sUUFBUTtBQUVyQixJQUFJLG1CQUFvQztBQUFBLEVBQ3BDLE1BQU0sUUFBUSxJQUFJLGFBQWEsUUFBUSxJQUFJLGFBQWEsV0FBVyxTQUFTLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUztBQUNsSDtBQUVBLElBQUksUUFBUSxJQUFJLHdCQUF3QixRQUFRLElBQUkseUJBQXlCLFFBQVE7QUFDakYsUUFBTSxhQUFhLFFBQVEsSUFBSSxtQ0FBbUMsU0FBUyxRQUFRLElBQUksZ0NBQWdDLElBQUk7QUFDM0gsUUFBTSxhQUFhLFFBQVEsSUFBSSxtQ0FBbUMsU0FBUyxRQUFRLElBQUksZ0NBQWdDLElBQUk7QUFFM0gsbUJBQWlCLFNBQVM7QUFBQSxJQUN0QixTQUFTO0FBQUEsTUFDTCxVQUFVO0FBQUEsUUFDTixTQUFTLENBQUMsWUFBWSxVQUFVO0FBQUEsTUFDcEM7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKO0FBRUEsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDeEIsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBLElBQ0gsZUFBZTtBQUFBLE1BQ1gsT0FBTztBQUFBLFFBQ0gsT0FBTztBQUFBLFFBQ1AsR0FBRyxlQUFlLElBQUk7QUFBQSxNQUMxQjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUEsRUFDQSxTQUFTLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUFBLEVBQ3RELFFBQVE7QUFBQSxJQUNKLE1BQU07QUFBQSxJQUNOLFNBQVM7QUFBQSxNQUNMLCtCQUErQjtBQUFBLE1BQy9CLGdDQUFnQztBQUFBLE1BQ2hDLGdDQUFnQztBQUFBLE1BQ2hDLGlCQUFpQjtBQUFBLElBQ3JCO0FBQUEsSUFDQSxNQUFNO0FBQUEsRUFDVjtBQUNKLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
